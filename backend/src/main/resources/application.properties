spring.application.name=iot-platform

# PostgreSQL Configuration
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://postgres-db:5432/iot_platform?currentSchema=iot_platform}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:1}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.default_schema=iot_platform
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.sql.init.mode=always

# Create schema if not exists
spring.jpa.properties.javax.persistence.schema-generation.database.action=create
spring.jpa.properties.hibernate.hbm2ddl.schema-generation.create-schema-sources=metadata

# Kafka Configuration
spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
# Add other Kafka producer/consumer properties as needed, e.g., serializers/deserializers

# Server Port
server.port=${SERVER_PORT:8080}

# Static resources
spring.web.resources.static-locations=classpath:/static/
spring.mvc.static-path-pattern=/**

# SPA routing support
spring.web.resources.add-mappings=true

# CORS settings
spring.webmvc.cors.allowed-origins=*
spring.webmvc.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.webmvc.cors.allowed-headers=*