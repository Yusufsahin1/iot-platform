package com.yusufsahin.iot_platform.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.yusufsahin.iot_platform.dto.SensorDataDto;
import lombok.extern.slf4j.Slf4j;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Random;

@Service
@Slf4j
public class SensorDataProducer {

    private static final String TOPIC = "sensor-data";

    private final KafkaTemplate<String, String> kafkaTemplate;
    private final ObjectMapper objectMapper;

    private final Random random = new Random();

    // Devices and locations to be simulated
    private final String[] deviceIds = {"device-001", "device-002", "device-003", "device-004", "device-005"};
    private final String[] locations = {"A", "B", "C", "D", "E"};

    public SensorDataProducer(KafkaTemplate<String, String> kafkaTemplate, ObjectMapper objectMapper) {
        this.kafkaTemplate = kafkaTemplate;
        this.objectMapper = objectMapper;
        // Module to deserialize LocalDateTime correctly
        objectMapper.registerModule(new JavaTimeModule());
        objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
    }

    @Scheduled(fixedRate = 5000) // Every 5 seconds
    public void generateAndSendSensorData() {
        for (String deviceId : deviceIds) {
            SensorDataDto simulatedData = createSimulatedSensorData(deviceId);
            sendSensorData(simulatedData);
        }
    }

    private SensorDataDto createSimulatedSensorData(String deviceId) {
        // random data generation
        double temperature = 20.0 + (random.nextDouble() * 10.0); // 20.0 - 30.0 Â°C
        double humidity = 40.0 + (random.nextDouble() * 30.0);    // 40.0 - 70.0 %
        double pressure = 1000.0 + (random.nextDouble() * 20.0);  // 1000.0 - 1020.0 hPa
        int batteryLevel = 50 + random.nextInt(51); // 50 - 100 %

        String location = locations[random.nextInt(locations.length)];

        return new SensorDataDto(
                null, // automatically generated by DB
                deviceId,
                temperature,
                humidity,
                pressure,
                LocalDateTime.now(),
                location,
                batteryLevel
        );
    }

    private void sendSensorData(SensorDataDto data) {

        try {
            String jsonData = objectMapper.writeValueAsString(data);
            kafkaTemplate.send(TOPIC, data.deviceId(), jsonData);
            //log.info("Sent sensor data to Kafka for device: {}", data.deviceId());
        } catch (Exception e) {
            log.error("Error sending sensor data to Kafka: ", e);
        }
    }

}
